; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drv_lcd_panel.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drv_lcd_panel.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\drv_lcd_panel.crf ..\Drv_LCD_Panel.c]
                          THUMB

                          AREA ||i.Address_set||, CODE, READONLY, ALIGN=1

                  Address_set PROC
;;;193    
;;;194    void Address_set(unsigned int x1, unsigned int x2, unsigned int y1, unsigned int y2)
000000  b5f8              PUSH     {r3-r7,lr}
;;;195    {
000002  4607              MOV      r7,r0
000004  461c              MOV      r4,r3
000006  4615              MOV      r5,r2
000008  460e              MOV      r6,r1
;;;196        _write_command(0x2a);   //x
00000a  202a              MOVS     r0,#0x2a
00000c  f7fffffe          BL       _write_command
;;;197        _write_data(x1 >> 8);
000010  0438              LSLS     r0,r7,#16
000012  0e00              LSRS     r0,r0,#24
000014  f7fffffe          BL       _write_data
;;;198        _write_data(x1);
000018  b2f8              UXTB     r0,r7
00001a  f7fffffe          BL       _write_data
;;;199        _write_data(x2 >> 8);
00001e  0430              LSLS     r0,r6,#16
000020  0e00              LSRS     r0,r0,#24
000022  f7fffffe          BL       _write_data
;;;200        _write_data(x2);
000026  b2f0              UXTB     r0,r6
000028  f7fffffe          BL       _write_data
;;;201        _write_command(0x2b);   //y
00002c  202b              MOVS     r0,#0x2b
00002e  f7fffffe          BL       _write_command
;;;202        _write_data(y1 >> 8);
000032  0428              LSLS     r0,r5,#16
000034  0e00              LSRS     r0,r0,#24
000036  f7fffffe          BL       _write_data
;;;203        _write_data(y1);
00003a  b2e8              UXTB     r0,r5
00003c  f7fffffe          BL       _write_data
;;;204        _write_data(y2 >> 8);
000040  0420              LSLS     r0,r4,#16
000042  0e00              LSRS     r0,r0,#24
000044  f7fffffe          BL       _write_data
;;;205        _write_data(y2);
000048  b2e0              UXTB     r0,r4
00004a  f7fffffe          BL       _write_data
;;;206        _write_command(0x2c);
00004e  202c              MOVS     r0,#0x2c
000050  f7fffffe          BL       _write_command
;;;207    }
000054  bdf8              POP      {r3-r7,pc}
;;;208    
                          ENDP


                          AREA ||i.Drv_ILI9341_LCD_Init||, CODE, READONLY, ALIGN=2

                  Drv_ILI9341_LCD_Init PROC
;;;59     
;;;60     void Drv_ILI9341_LCD_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;61     {
;;;62         /* Configure DC/RESET/LED pins */
;;;63         GPIO_LCM_DC = 0;
000002  4991              LDR      r1,|L2.584|
000004  2500              MOVS     r5,#0
000006  600d              STR      r5,[r1,#0]
;;;64         GPIO_LCM_RESET = 0;
000008  604d              STR      r5,[r1,#4]
;;;65         SetLCMBackBrightness(0);
;;;66     
;;;67         /* Configure LCD */
;;;68         GPIO_LCM_DC = 1;
00000a  2201              MOVS     r2,#1
00000c  600a              STR      r2,[r1,#0]
;;;69     
;;;70         /* RESET LCD */
;;;71         GPIO_LCM_RESET = 0;
00000e  604d              STR      r5,[r1,#4]
000010  4e8e              LDR      r6,|L2.588|
000012  4b8f              LDR      r3,|L2.592|
000014  6830              LDR      r0,[r6,#0]  ; CyclesPerUs
000016  4c8f              LDR      r4,|L2.596|
000018  4343              MULS     r3,r0,r3
00001a  6163              STR      r3,[r4,#0x14]
00001c  61a5              STR      r5,[r4,#0x18]
00001e  2705              MOVS     r7,#5
000020  6127              STR      r7,[r4,#0x10]
                  |L2.34|
000022  6923              LDR      r3,[r4,#0x10]
000024  03db              LSLS     r3,r3,#15
000026  d5fc              BPL      |L2.34|
000028  6125              STR      r5,[r4,#0x10]
;;;72         CLK_SysTickDelay(20000);
;;;73         GPIO_LCM_RESET = 1;
00002a  604a              STR      r2,[r1,#4]
00002c  498a              LDR      r1,|L2.600|
00002e  4348              MULS     r0,r1,r0
000030  6160              STR      r0,[r4,#0x14]
000032  61a5              STR      r5,[r4,#0x18]
000034  6127              STR      r7,[r4,#0x10]
                  |L2.54|
000036  6920              LDR      r0,[r4,#0x10]
000038  03c0              LSLS     r0,r0,#15
00003a  d5fc              BPL      |L2.54|
00003c  6125              STR      r5,[r4,#0x10]
;;;74         CLK_SysTickDelay(40000);
;;;75     
;;;76         //************* Start Initial Sequence **********//
;;;77         _write_command(0xCF);
00003e  20cf              MOVS     r0,#0xcf
000040  f7fffffe          BL       _write_command
;;;78         _write_data(0x00);
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       _write_data
;;;79         _write_data(0xD9);
00004a  20d9              MOVS     r0,#0xd9
00004c  f7fffffe          BL       _write_data
;;;80         _write_data(0X30);
000050  2030              MOVS     r0,#0x30
000052  f7fffffe          BL       _write_data
;;;81     
;;;82         _write_command(0xED);
000056  20ed              MOVS     r0,#0xed
000058  f7fffffe          BL       _write_command
;;;83         _write_data(0x64);
00005c  2064              MOVS     r0,#0x64
00005e  f7fffffe          BL       _write_data
;;;84         _write_data(0x03);
000062  2003              MOVS     r0,#3
000064  f7fffffe          BL       _write_data
;;;85         _write_data(0X12);
000068  2012              MOVS     r0,#0x12
00006a  f7fffffe          BL       _write_data
;;;86         _write_data(0X81);
00006e  2081              MOVS     r0,#0x81
000070  f7fffffe          BL       _write_data
;;;87     
;;;88         _write_command(0xE8);
000074  20e8              MOVS     r0,#0xe8
000076  f7fffffe          BL       _write_command
;;;89         _write_data(0x85);
00007a  2085              MOVS     r0,#0x85
00007c  f7fffffe          BL       _write_data
;;;90         _write_data(0x10);
000080  2010              MOVS     r0,#0x10
000082  f7fffffe          BL       _write_data
;;;91         _write_data(0x78);
000086  2078              MOVS     r0,#0x78
000088  f7fffffe          BL       _write_data
;;;92     
;;;93         _write_command(0xCB);
00008c  20cb              MOVS     r0,#0xcb
00008e  f7fffffe          BL       _write_command
;;;94         _write_data(0x39);
000092  2039              MOVS     r0,#0x39
000094  f7fffffe          BL       _write_data
;;;95         _write_data(0x2C);
000098  202c              MOVS     r0,#0x2c
00009a  f7fffffe          BL       _write_data
;;;96         _write_data(0x00);
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       _write_data
;;;97         _write_data(0x34);
0000a4  2034              MOVS     r0,#0x34
0000a6  f7fffffe          BL       _write_data
;;;98         _write_data(0x02);
0000aa  2002              MOVS     r0,#2
0000ac  f7fffffe          BL       _write_data
;;;99     
;;;100        _write_command(0xF7);
0000b0  20f7              MOVS     r0,#0xf7
0000b2  f7fffffe          BL       _write_command
;;;101        _write_data(0x20);
0000b6  2020              MOVS     r0,#0x20
0000b8  f7fffffe          BL       _write_data
;;;102    
;;;103        _write_command(0xEA);
0000bc  20ea              MOVS     r0,#0xea
0000be  f7fffffe          BL       _write_command
;;;104        _write_data(0x00);
0000c2  2000              MOVS     r0,#0
0000c4  f7fffffe          BL       _write_data
;;;105        _write_data(0x00);
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       _write_data
;;;106    
;;;107        _write_command(0xC0);   //Power control
0000ce  20c0              MOVS     r0,#0xc0
0000d0  f7fffffe          BL       _write_command
;;;108        _write_data(0x21);      //VRH[5:0]
0000d4  2021              MOVS     r0,#0x21
0000d6  f7fffffe          BL       _write_data
;;;109    
;;;110        _write_command(0xC1);   //Power control
0000da  20c1              MOVS     r0,#0xc1
0000dc  f7fffffe          BL       _write_command
;;;111        _write_data(0x12);      //SAP[2:0];BT[3:0]
0000e0  2012              MOVS     r0,#0x12
0000e2  f7fffffe          BL       _write_data
;;;112    
;;;113        _write_command(0xC5);   //VCM control
0000e6  20c5              MOVS     r0,#0xc5
0000e8  f7fffffe          BL       _write_command
;;;114        _write_data(0x32);
0000ec  2032              MOVS     r0,#0x32
0000ee  f7fffffe          BL       _write_data
;;;115        _write_data(0x3C);
0000f2  203c              MOVS     r0,#0x3c
0000f4  f7fffffe          BL       _write_data
;;;116    
;;;117        _write_command(0xC7);   //VCM control2
0000f8  20c7              MOVS     r0,#0xc7
0000fa  f7fffffe          BL       _write_command
;;;118        _write_data(0XC1);
0000fe  20c1              MOVS     r0,#0xc1
000100  f7fffffe          BL       _write_data
;;;119    
;;;120        _write_command(0x36);   //Memory Access Control
000104  2036              MOVS     r0,#0x36
000106  f7fffffe          BL       _write_command
;;;121        //_write_data(0xe8);
;;;122        _write_data(0xc8);
00010a  20c8              MOVS     r0,#0xc8
00010c  f7fffffe          BL       _write_data
;;;123        _write_command(0x3A);
000110  203a              MOVS     r0,#0x3a
000112  f7fffffe          BL       _write_command
;;;124        _write_data(0x55);
000116  2055              MOVS     r0,#0x55
000118  f7fffffe          BL       _write_data
;;;125    
;;;126        _write_command(0xB1);
00011c  20b1              MOVS     r0,#0xb1
00011e  f7fffffe          BL       _write_command
;;;127        _write_data(0x00);
000122  2000              MOVS     r0,#0
000124  f7fffffe          BL       _write_data
;;;128        _write_data(0x13);
000128  2013              MOVS     r0,#0x13
00012a  f7fffffe          BL       _write_data
;;;129        _write_command(0xB6);   //Display Function Control
00012e  20b6              MOVS     r0,#0xb6
000130  f7fffffe          BL       _write_command
;;;130        _write_data(0x0A);
000134  200a              MOVS     r0,#0xa
000136  f7fffffe          BL       _write_data
;;;131        _write_data(0xA2);
00013a  20a2              MOVS     r0,#0xa2
00013c  f7fffffe          BL       _write_data
;;;132    
;;;133        _write_command(0xF2);   //3G Gamma control
000140  20f2              MOVS     r0,#0xf2
000142  f7fffffe          BL       _write_command
;;;134        _write_data(0x02);
000146  2002              MOVS     r0,#2
000148  f7fffffe          BL       _write_data
;;;135        _write_command(0x26);   //Gamma Curve Select 3
00014c  2026              MOVS     r0,#0x26
00014e  f7fffffe          BL       _write_command
;;;136        _write_data(0x01);
000152  2001              MOVS     r0,#1
000154  f7fffffe          BL       _write_data
;;;137    
;;;138        _write_command(0xE0);   //Set Gamma
000158  20e0              MOVS     r0,#0xe0
00015a  f7fffffe          BL       _write_command
;;;139        _write_data(0x0F);
00015e  200f              MOVS     r0,#0xf
000160  f7fffffe          BL       _write_data
;;;140        _write_data(0x20);
000164  2020              MOVS     r0,#0x20
000166  f7fffffe          BL       _write_data
;;;141        _write_data(0x19);
00016a  2019              MOVS     r0,#0x19
00016c  f7fffffe          BL       _write_data
;;;142        _write_data(0x0F);
000170  200f              MOVS     r0,#0xf
000172  f7fffffe          BL       _write_data
;;;143        _write_data(0x10);
000176  2010              MOVS     r0,#0x10
000178  f7fffffe          BL       _write_data
;;;144        _write_data(0x08);
00017c  2008              MOVS     r0,#8
00017e  f7fffffe          BL       _write_data
;;;145        _write_data(0x4A);
000182  204a              MOVS     r0,#0x4a
000184  f7fffffe          BL       _write_data
;;;146        _write_data(0xF6);
000188  20f6              MOVS     r0,#0xf6
00018a  f7fffffe          BL       _write_data
;;;147        _write_data(0x3A);
00018e  203a              MOVS     r0,#0x3a
000190  f7fffffe          BL       _write_data
;;;148        _write_data(0x0F);
000194  200f              MOVS     r0,#0xf
000196  f7fffffe          BL       _write_data
;;;149        _write_data(0x14);
00019a  2014              MOVS     r0,#0x14
00019c  f7fffffe          BL       _write_data
;;;150        _write_data(0x09);
0001a0  2009              MOVS     r0,#9
0001a2  f7fffffe          BL       _write_data
;;;151        _write_data(0x18);
0001a6  2018              MOVS     r0,#0x18
0001a8  f7fffffe          BL       _write_data
;;;152        _write_data(0x0B);
0001ac  200b              MOVS     r0,#0xb
0001ae  f7fffffe          BL       _write_data
;;;153        _write_data(0x08);
0001b2  2008              MOVS     r0,#8
0001b4  f7fffffe          BL       _write_data
;;;154    
;;;155        _write_command(0xE1);   //Set Gamma
0001b8  20e1              MOVS     r0,#0xe1
0001ba  f7fffffe          BL       _write_command
;;;156        _write_data(0x00);
0001be  2000              MOVS     r0,#0
0001c0  f7fffffe          BL       _write_data
;;;157        _write_data(0x1E);
0001c4  201e              MOVS     r0,#0x1e
0001c6  f7fffffe          BL       _write_data
;;;158        _write_data(0x1E);
0001ca  201e              MOVS     r0,#0x1e
0001cc  f7fffffe          BL       _write_data
;;;159        _write_data(0x05);
0001d0  2005              MOVS     r0,#5
0001d2  f7fffffe          BL       _write_data
;;;160        _write_data(0x0F);
0001d6  200f              MOVS     r0,#0xf
0001d8  f7fffffe          BL       _write_data
;;;161        _write_data(0x04);
0001dc  2004              MOVS     r0,#4
0001de  f7fffffe          BL       _write_data
;;;162        _write_data(0x31);
0001e2  2031              MOVS     r0,#0x31
0001e4  f7fffffe          BL       _write_data
;;;163        _write_data(0x33);
0001e8  2033              MOVS     r0,#0x33
0001ea  f7fffffe          BL       _write_data
;;;164        _write_data(0x43);
0001ee  2043              MOVS     r0,#0x43
0001f0  f7fffffe          BL       _write_data
;;;165        _write_data(0x04);
0001f4  2004              MOVS     r0,#4
0001f6  f7fffffe          BL       _write_data
;;;166        _write_data(0x0B);
0001fa  200b              MOVS     r0,#0xb
0001fc  f7fffffe          BL       _write_data
;;;167        _write_data(0x06);
000200  2006              MOVS     r0,#6
000202  f7fffffe          BL       _write_data
;;;168        _write_data(0x27);
000206  2027              MOVS     r0,#0x27
000208  f7fffffe          BL       _write_data
;;;169        _write_data(0x34);
00020c  2034              MOVS     r0,#0x34
00020e  f7fffffe          BL       _write_data
;;;170        _write_data(0x0F);
000212  200f              MOVS     r0,#0xf
000214  f7fffffe          BL       _write_data
;;;171    
;;;172        _write_command(0x11);    //Exit Sleep
000218  2011              MOVS     r0,#0x11
00021a  f7fffffe          BL       _write_command
00021e  490f              LDR      r1,|L2.604|
000220  6830              LDR      r0,[r6,#0]  ; CyclesPerUs
000222  4348              MULS     r0,r1,r0
000224  6160              STR      r0,[r4,#0x14]
000226  61a5              STR      r5,[r4,#0x18]
000228  6127              STR      r7,[r4,#0x10]
                  |L2.554|
00022a  6920              LDR      r0,[r4,#0x10]
00022c  03c0              LSLS     r0,r0,#15
00022e  d5fc              BPL      |L2.554|
000230  6125              STR      r5,[r4,#0x10]
;;;173        
;;;174        CLK_SysTickDelay(120000);
;;;175        
;;;176        _write_command(0x29);    //Display on
000232  2029              MOVS     r0,#0x29
000234  f7fffffe          BL       _write_command
000238  23ff              MOVS     r3,#0xff
00023a  2200              MOVS     r2,#0
00023c  3340              ADDS     r3,r3,#0x40
00023e  21ef              MOVS     r1,#0xef
000240  4610              MOV      r0,r2
000242  f7fffffe          BL       Address_set
;;;177    
;;;178        /* Initial LCD display backlight brightness */
;;;179        SetLCMBackBrightness(LCM_BRIGHTNESS);
;;;180    
;;;181        /* Initial LCD display position */
;;;182        LCD_Set_Pos();
;;;183    }
000246  bdf8              POP      {r3-r7,pc}
;;;184    
                          ENDP

                  |L2.584|
                          DCD      0x50004200
                  |L2.588|
                          DCD      CyclesPerUs
                  |L2.592|
                          DCD      0x00004e20
                  |L2.596|
                          DCD      0xe000e000
                  |L2.600|
                          DCD      0x00009c40
                  |L2.604|
                          DCD      0x0001d4c0

                          AREA ||i.LCD_Set_Color||, CODE, READONLY, ALIGN=1

                  LCD_Set_Color PROC
;;;184    
;;;185    void LCD_Set_Color(unsigned int color)
000000  b510              PUSH     {r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187        /* Write command High byte and Low byte */
;;;188        _write_data(color >> 8);
000004  0400              LSLS     r0,r0,#16
000006  0e00              LSRS     r0,r0,#24
000008  f7fffffe          BL       _write_data
;;;189        _write_data(color);
00000c  b2e0              UXTB     r0,r4
00000e  f7fffffe          BL       _write_data
;;;190    	
;;;191    			//_write_data(0xAA);
;;;192    }
000012  bd10              POP      {r4,pc}
;;;193    
                          ENDP


                          AREA ||i.LCD_Set_Pos||, CODE, READONLY, ALIGN=1

                  LCD_Set_Pos PROC
;;;208    
;;;209    void LCD_Set_Pos(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        /* Set LCD display position */
;;;212        Address_set(0, LCD_Resolution_X - 1, 0, LCD_Resolution_Y - 1);
000002  23ff              MOVS     r3,#0xff
000004  2200              MOVS     r2,#0
000006  3340              ADDS     r3,r3,#0x40
000008  21ef              MOVS     r1,#0xef
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       Address_set
;;;213    }
000010  bd10              POP      {r4,pc}
;;;214    void SetLCMBackBrightness(uint8_t Percentage)
                          ENDP


                          AREA ||i.SetLCMBackBrightness||, CODE, READONLY, ALIGN=1

                  SetLCMBackBrightness PROC
;;;213    }
;;;214    void SetLCMBackBrightness(uint8_t Percentage)
000000  4770              BX       lr
;;;215    {
;;;216        if (Percentage > 100) Percentage = 100;
;;;217    	
;;;218        /* Set New Brightness */
;;;219        //PWM_ConfigOutputChannel(PWM1, 5, 1000, Percentage);
;;;220    }
                          ENDP


                          AREA ||i._write_command||, CODE, READONLY, ALIGN=2

                  _write_command PROC
;;;23     
;;;24     static void _write_command(unsigned char temp)
000000  4a07              LDR      r2,|L6.32|
;;;25     {
;;;26         /* DC = 0 : write command */
;;;27         LCM_DC_CLR;
000002  2100              MOVS     r1,#0
000004  6011              STR      r1,[r2,#0]
;;;28         SPI_CS_CLR;
000006  6311              STR      r1,[r2,#0x30]
;;;29     
;;;30         /* Set data to SPI FIFO */
;;;31         SPI_WRITE_TX0(SPI_LCD_PORT, temp);
000008  4906              LDR      r1,|L6.36|
00000a  6208              STR      r0,[r1,#0x20]
;;;32     	
;;;33     		/* Trigger SPI data transfer */
;;;34     		SPI_TRIGGER(SPI0);
00000c  6808              LDR      r0,[r1,#0]
00000e  2301              MOVS     r3,#1
000010  4318              ORRS     r0,r0,r3
000012  6008              STR      r0,[r1,#0]
                  |L6.20|
;;;35     
;;;36         /* Wait SPI transmit finish */
;;;37         while (SPI_IS_BUSY(SPI_LCD_PORT));
000014  6808              LDR      r0,[r1,#0]
000016  07c0              LSLS     r0,r0,#31
000018  d1fc              BNE      |L6.20|
;;;38     
;;;39         SPI_CS_SET;
00001a  6313              STR      r3,[r2,#0x30]
;;;40     }
00001c  4770              BX       lr
;;;41     
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x50004200
                  |L6.36|
                          DCD      0x40030000

                          AREA ||i._write_data||, CODE, READONLY, ALIGN=2

                  _write_data PROC
;;;41     
;;;42     static void _write_data(unsigned char temp)
000000  4b07              LDR      r3,|L7.32|
;;;43     {
;;;44         /* DC = 1 : write data */
;;;45         LCM_DC_SET;
000002  2201              MOVS     r2,#1
000004  601a              STR      r2,[r3,#0]
;;;46         SPI_CS_CLR;
000006  2100              MOVS     r1,#0
000008  6319              STR      r1,[r3,#0x30]
;;;47     
;;;48         /* Set data to SPI FIFO */
;;;49         SPI_WRITE_TX0(SPI_LCD_PORT, temp);
00000a  4906              LDR      r1,|L7.36|
00000c  6208              STR      r0,[r1,#0x20]
;;;50     	
;;;51     		/* Trigger SPI data transfer */
;;;52     		SPI_TRIGGER(SPI0);
00000e  6808              LDR      r0,[r1,#0]
000010  4310              ORRS     r0,r0,r2
000012  6008              STR      r0,[r1,#0]
                  |L7.20|
;;;53     	
;;;54         /* Wait SPI transmit finish */
;;;55         while (SPI_IS_BUSY(SPI_LCD_PORT));
000014  6808              LDR      r0,[r1,#0]
000016  07c0              LSLS     r0,r0,#31
000018  d1fc              BNE      |L7.20|
;;;56     
;;;57         SPI_CS_SET;
00001a  631a              STR      r2,[r3,#0x30]
;;;58     }
00001c  4770              BX       lr
;;;59     
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x50004200
                  |L7.36|
                          DCD      0x40030000

;*** Start embedded assembler ***

#line 1 "..\\Drv_LCD_Panel.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_Drv_LCD_Panel_c_93b4d2e4____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_Drv_LCD_Panel_c_93b4d2e4____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_Drv_LCD_Panel_c_93b4d2e4____REVSH|
#line 132
|__asm___15_Drv_LCD_Panel_c_93b4d2e4____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
