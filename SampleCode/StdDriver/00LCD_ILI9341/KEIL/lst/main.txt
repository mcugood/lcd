; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Drv_NuMaker_HWInit||, CODE, READONLY, ALIGN=2

                  Drv_NuMaker_HWInit PROC
;;;119    }
;;;120    void Drv_NuMaker_HWInit(void)
000000  b538              PUSH     {r3-r5,lr}
000002  4808              LDR      r0,|L1.36|
000004  4c08              LDR      r4,|L1.40|
000006  9000              STR      r0,[sp,#0]
000008  2320              MOVS     r3,#0x20
00000a  2204              MOVS     r2,#4
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPI_Open
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPI_EnableAutoSS
;;;121    {
;;;122        /* Initial NuMaker Hardware */
;;;123        /* Initial MCU Hardware */
;;;124        _InitMCUHWforLCD();
;;;125    	
;;;126        /* Initial ILI9341 LCD Panel Hardware */
;;;127        Drv_ILI9341_LCD_Init();
00001e  f7fffffe          BL       Drv_ILI9341_LCD_Init
;;;128    }
000022  bd38              POP      {r3-r5,pc}
;;;129    int32_t main(void)
                          ENDP

                  |L1.36|
                          DCD      0x001e8480
                  |L1.40|
                          DCD      0x40030000

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;22     /*------------------------------------------------------------------------------------*/
;;;23     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  4c1a              LDR      r4,|L2.108|
000004  6820              LDR      r0,[r4,#0]
000006  2801              CMP      r0,#1
;;;24     {
000008  d008              BEQ      |L2.28|
00000a  2059              MOVS     r0,#0x59
00000c  2116              MOVS     r1,#0x16
00000e  2288              MOVS     r2,#0x88
                  |L2.16|
000010  6020              STR      r0,[r4,#0]
000012  6021              STR      r1,[r4,#0]
000014  6022              STR      r2,[r4,#0]
000016  6823              LDR      r3,[r4,#0]
000018  2b01              CMP      r3,#1
00001a  d1f9              BNE      |L2.16|
                  |L2.28|
;;;25     	
;;;26     		/* Unlock protected registers */
;;;27         SYS_UnlockReg();
;;;28     	
;;;29     	   /*---------------------------------------------------------------------------------------------------------*/
;;;30         /* Init System Clock                                                                                       */
;;;31         /*---------------------------------------------------------------------------------------------------------*/
;;;32     
;;;33         /* Enable external 12MHz XTAL */
;;;34         CLK_EnableXtalRC(CLK_PWRCON_XTL12M_EN_Msk);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       CLK_EnableXtalRC
;;;35     
;;;36         /* Waiting for clock ready */
;;;37         CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       CLK_WaitClockReady
;;;38     
;;;39         /* Switch HCLK clock source to HXT and HCLK source divide 1 */
;;;40         CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HXT, CLK_CLKDIV_HCLK(1));
000028  2100              MOVS     r1,#0
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       CLK_SetHCLK
;;;41     
;;;42         /* Select HXT as the clock source of UART0 */
;;;43         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HXT, CLK_CLKDIV_UART(1));
000030  4d0f              LDR      r5,|L2.112|
000032  2200              MOVS     r2,#0
000034  4611              MOV      r1,r2
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       CLK_SetModuleClock
;;;44     
;;;45         /* Select HCLK as the clock source of SPI0 */
;;;46         CLK_SetModuleClock(SPI0_MODULE, CLK_CLKSEL1_SPI0_S_HCLK, MODULE_NoMsk);
00003c  4e0d              LDR      r6,|L2.116|
00003e  2200              MOVS     r2,#0
000040  2110              MOVS     r1,#0x10
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       CLK_SetModuleClock
;;;47     
;;;48         /* Enable UART peripheral clock */
;;;49         CLK_EnableModuleClock(UART0_MODULE);
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       CLK_EnableModuleClock
;;;50         /* Enable SPI0 peripheral clock */
;;;51         CLK_EnableModuleClock(SPI0_MODULE);
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;52     
;;;53         /*---------------------------------------------------------------------------------------------------------*/
;;;54         /* Init I/O Multi-function                                                                                 */
;;;55         /*---------------------------------------------------------------------------------------------------------*/
;;;56     
;;;57         /* Set P3 multi-function pins for UART0 RXD and TXD */
;;;58         SYS->P3_MFP = SYS_MFP_P30_RXD0 | SYS_MFP_P31_TXD0;
000054  2103              MOVS     r1,#3
000056  2005              MOVS     r0,#5
000058  0700              LSLS     r0,r0,#28
00005a  63c1              STR      r1,[r0,#0x3c]
;;;59     
;;;60         /* Setup SPI0 multi-function pins */
;;;61         SYS->P1_MFP = SYS_MFP_P14_SPISS0 | SYS_MFP_P15_MOSI_0 | SYS_MFP_P16_MISO_0 | SYS_MFP_P17_SPICLK0;
00005c  210f              MOVS     r1,#0xf
00005e  0309              LSLS     r1,r1,#12
000060  6341              STR      r1,[r0,#0x34]
;;;62     
;;;63         /* Update System Core Clock */
;;;64         /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock and CyclesPerUs automatically. */
;;;65         SystemCoreClockUpdate();
000062  f7fffffe          BL       SystemCoreClockUpdate
000066  2000              MOVS     r0,#0
000068  6020              STR      r0,[r4,#0]
;;;66     		
;;;67     		/* Lock protected registers */
;;;68         SYS_LockReg();
;;;69     		
;;;70     }
00006a  bd70              POP      {r4-r6,pc}
;;;71     
                          ENDP

                  |L2.108|
                          DCD      0x50000100
                  |L2.112|
                          DCD      0x57803d10
                  |L2.116|
                          DCD      0x5240000c

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;128    }
;;;129    int32_t main(void)
000000  b538              PUSH     {r3-r5,lr}
;;;130    {
;;;131        uint32_t i = 0;
;;;132    		GPIO_SetMode(P0, BIT0, GPIO_PMD_OUTPUT);
000002  4c0f              LDR      r4,|L3.64|
000004  2201              MOVS     r2,#1
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;133    		GPIO_SetMode(P0, BIT1, GPIO_PMD_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  2102              MOVS     r1,#2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;134        /* Init System, IP clock and multi-function I/O. */
;;;135        SYS_Init();
000018  f7fffffe          BL       SYS_Init
00001c  4809              LDR      r0,|L3.68|
00001e  4c0a              LDR      r4,|L3.72|
000020  9000              STR      r0,[sp,#0]
000022  2320              MOVS     r3,#0x20
000024  2204              MOVS     r2,#4
000026  2100              MOVS     r1,#0
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SPI_Open
00002e  2200              MOVS     r2,#0
000030  2101              MOVS     r1,#1
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_EnableAutoSS
000038  f7fffffe          BL       Drv_ILI9341_LCD_Init
;;;136    		/* Initial NuMaker Hardware */
;;;137    		Drv_NuMaker_HWInit();
;;;138    
;;;139    //    /* DC = 0 : write command */
;;;140    //    LCM_DC_CLR;
;;;141    //    SPI_CS_CLR;
;;;142    
;;;143    //    /* Set data to SPI FIFO */
;;;144    //    SPI_WRITE_TX0(SPI_LCD_PORT, 0xDC);
;;;145    //	
;;;146    //		/* Trigger SPI data transfer */
;;;147    //		SPI_TRIGGER(SPI0);
;;;148    
;;;149    //    /* Wait SPI transmit finish */
;;;150    //    while (SPI_IS_BUSY(SPI_LCD_PORT));
;;;151    
;;;152    //    SPI_CS_SET;
;;;153    		
;;;154    //    while (1)
;;;155    //    {
;;;156    //        /* Display color yellow */
;;;157    //        for (i = 0; i < (LCD_Resolution_X * LCD_Resolution_Y * 2); i++)
;;;158    //        {
;;;159    //            LCD_Set_Color(Yellow);
;;;160    //        }
;;;161    
;;;162    //        CLK_SysTickDelay(200000);
;;;163    
;;;164    //        /* Display color Green */
;;;165    //        for (i = 0; i < (LCD_Resolution_X * LCD_Resolution_Y * 2); i++)
;;;166    //        {
;;;167    //            LCD_Set_Color(Green);
;;;168    //        }
;;;169    
;;;170    //        CLK_SysTickDelay(200000);
;;;171    
;;;172    //        /* Display color Red */
;;;173    //        for (i = 0; i < (LCD_Resolution_X * LCD_Resolution_Y * 2); i++)
;;;174    //        {
;;;175    //            LCD_Set_Color(Red);
;;;176    //        }
;;;177    
;;;178    //        CLK_SysTickDelay(200000);
;;;179    //    }
;;;180    }
00003c  2000              MOVS     r0,#0
00003e  bd38              POP      {r3-r5,pc}
;;;181    /*** (C) COPYRIGHT 2019 Nuvoton Technology Corp. ***/
                          ENDP

                  |L3.64|
                          DCD      0x50004000
                  |L3.68|
                          DCD      0x001e8480
                  |L3.72|
                          DCD      0x40030000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 132
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
