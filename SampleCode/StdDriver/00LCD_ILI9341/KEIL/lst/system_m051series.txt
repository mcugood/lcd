; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\system_m051series.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_m051series.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\system_m051series.crf ..\..\..\..\Library\Device\Nuvoton\M051Series\Source\system_M051Series.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;38      */
;;;39     void SystemCoreClockUpdate(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;40     {
;;;41         uint32_t u32Freq, u32ClkSrc;
;;;42         uint32_t u32HclkDiv;
;;;43     
;;;44         u32ClkSrc = CLK->CLKSEL0 & CLK_CLKSEL0_HCLK_S_Msk;
000002  4d1c              LDR      r5,|L1.116|
000004  6928              LDR      r0,[r5,#0x10]
000006  0744              LSLS     r4,r0,#29
000008  a01b              ADR      r0,|L1.120|
00000a  6800              LDR      r0,[r0,#0]
00000c  9000              STR      r0,[sp,#0]
00000e  6a29              LDR      r1,[r5,#0x20]
000010  0f64              LSRS     r4,r4,#29
000012  1328              ASRS     r0,r5,#12
000014  4201              TST      r1,r0
000016  d001              BEQ      |L1.28|
000018  2000              MOVS     r0,#0                 ;40
00001a  e016              B        |L1.74|
                  |L1.28|
00001c  0308              LSLS     r0,r1,#12             ;40
00001e  d501              BPL      |L1.36|
000020  4816              LDR      r0,|L1.124|
000022  e000              B        |L1.38|
                  |L1.36|
000024  4816              LDR      r0,|L1.128|
                  |L1.38|
000026  038a              LSLS     r2,r1,#14             ;40
000028  d40f              BMI      |L1.74|
00002a  040a              LSLS     r2,r1,#16             ;40
00002c  0f92              LSRS     r2,r2,#30             ;40
00002e  466b              MOV      r3,sp                 ;40
000030  5c9a              LDRB     r2,[r3,r2]            ;40
000032  05cb              LSLS     r3,r1,#23             ;40
000034  0489              LSLS     r1,r1,#18             ;40
000036  0ddb              LSRS     r3,r3,#23             ;40
000038  0ec9              LSRS     r1,r1,#27             ;40
00003a  1c89              ADDS     r1,r1,#2              ;40
00003c  0880              LSRS     r0,r0,#2              ;40
00003e  1c9b              ADDS     r3,r3,#2              ;40
000040  4351              MULS     r1,r2,r1              ;40
000042  4358              MULS     r0,r3,r0              ;40
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0080              LSLS     r0,r0,#2              ;40
                  |L1.74|
;;;45     
;;;46         /* Update PLL Clock */
;;;47         PllClock = CLK_GetPLLClockFreq();
00004a  4e0e              LDR      r6,|L1.132|
;;;48     
;;;49         if(u32ClkSrc != CLK_CLKSEL0_HCLK_S_PLL)
00004c  2c02              CMP      r4,#2
00004e  60b0              STR      r0,[r6,#8]  ; PllClock
000050  d002              BEQ      |L1.88|
;;;50         {
;;;51             /* Use the clock sources directly */
;;;52             u32Freq = gau32ClkSrcTbl[u32ClkSrc];
000052  490d              LDR      r1,|L1.136|
000054  00a0              LSLS     r0,r4,#2
000056  5808              LDR      r0,[r1,r0]
                  |L1.88|
;;;53         }
;;;54         else
;;;55         {
;;;56             /* Use PLL clock */
;;;57             u32Freq = PllClock;
;;;58         }
;;;59     
;;;60         u32HclkDiv = (CLK->CLKDIV & CLK_CLKDIV_HCLK_N_Msk) + 1;
000058  69a9              LDR      r1,[r5,#0x18]
00005a  0709              LSLS     r1,r1,#28
00005c  0f09              LSRS     r1,r1,#28
00005e  1c49              ADDS     r1,r1,#1
;;;61     
;;;62         /* Update System Core Clock */
;;;63         SystemCoreClock = u32Freq / u32HclkDiv;
000060  f7fffffe          BL       __aeabi_uidivmod
;;;64     
;;;65         CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
000064  4909              LDR      r1,|L1.140|
000066  6030              STR      r0,[r6,#0]  ; SystemCoreClock
000068  104a              ASRS     r2,r1,#1
00006a  1880              ADDS     r0,r0,r2
00006c  f7fffffe          BL       __aeabi_uidivmod
000070  6070              STR      r0,[r6,#4]  ; CyclesPerUs
;;;66     }
000072  bdf8              POP      {r3-r7,pc}
;;;67     
                          ENDP

                  |L1.116|
                          DCD      0x50000200
                  |L1.120|
000078  01020204          DCB      1,2,2,4
                  |L1.124|
                          DCD      0x01518000
                  |L1.128|
                          DCD      0x00b71b00
                  |L1.132|
                          DCD      ||.data||
                  |L1.136|
                          DCD      ||.constdata||
                  |L1.140|
                          DCD      0x000f4240

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=1

                  SystemInit PROC
;;;77      */
;;;78     void SystemInit(void)
000000  4770              BX       lr
;;;79     {
;;;80     #ifdef INIT_SYSCLK_AT_BOOTING
;;;81         int32_t i32TimeoutCnt;
;;;82         uint32_t u32HclkSelect;
;;;83         int8_t i8IsPllEn;
;;;84     
;;;85         PllClock = 0;
;;;86         i8IsPllEn = 0;
;;;87         u32HclkSelect = CLK->CLKSEL0 & CLK_CLKSEL0_HCLK_S_Msk;
;;;88         if(u32HclkSelect == CLK_CLKSEL0_HCLK_S_HXT)
;;;89         {
;;;90             /* Set to 50MHz system clock frequency when clock source is from external 12MHz */
;;;91             CLK->PLLCON = CLK_PLLCON_50MHz_HXT;
;;;92     
;;;93             /* Waiting for PLL ready */
;;;94             i32TimeoutCnt = (__HXT / 1000); /* Timeout is about 1ms */
;;;95             while((CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB_Msk) == 0)
;;;96             {
;;;97                 if(i32TimeoutCnt-- <= 0)
;;;98                     break;
;;;99             }
;;;100    
;;;101            i8IsPllEn = 1;
;;;102        }
;;;103        else if(u32HclkSelect == CLK_CLKSEL0_HCLK_S_HIRC)
;;;104        {
;;;105            /* Set to 50.1918MHz system clock frequency when clock source is from internal 22.1184MHz RC clock */
;;;106            CLK->PLLCON = CLK_PLLCON_50MHz_HIRC;
;;;107    
;;;108            /* Waiting for PLL ready */
;;;109            i32TimeoutCnt = (__HIRC / 1000); /* Timeout is about 1ms */
;;;110            while((CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB_Msk) == 0)
;;;111            {
;;;112                if(i32TimeoutCnt-- <= 0)
;;;113                    break;
;;;114            }
;;;115    
;;;116            i8IsPllEn = 1;
;;;117        }
;;;118    
;;;119        if(i8IsPllEn)
;;;120        {
;;;121            /* Set PLL as HCLK clock source (HCLK_S is locked setting)*/
;;;122            SYS_UnlockReg();
;;;123            CLK->CLKSEL0 = CLK_CLKSEL0_HCLK_S_PLL;
;;;124            SYS_LockReg();
;;;125        }
;;;126    #endif
;;;127    }
;;;128    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  gau32ClkSrcTbl
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x02faf080
                          DCD      0x00002710
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x02faf080
                  CyclesPerUs
                          DCD      0x00000032
                  PllClock
                          DCD      0x02faf080

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\M051Series\\Source\\system_M051Series.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_system_M051Series_c_5d646a67____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_system_M051Series_c_5d646a67____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_system_M051Series_c_5d646a67____REVSH|
#line 132
|__asm___19_system_M051Series_c_5d646a67____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
