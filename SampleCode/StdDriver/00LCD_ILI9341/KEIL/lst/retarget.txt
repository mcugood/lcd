; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork -Otime --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M051Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\retarget.crf ..\..\..\..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;545     */
;;;546    char GetChar(void)
000000  4803              LDR      r0,|L1.16|
                  |L1.2|
;;;547    {
;;;548    #ifdef DEBUG_ENABLE_SEMIHOST
;;;549    # if defined (__CC_ARM)
;;;550        int nRet;
;;;551        while(SH_DoCommand(0x101, 0, &nRet) != 0)
;;;552        {
;;;553            if(nRet != 0)
;;;554            {
;;;555                SH_DoCommand(0x07, 0, &nRet);
;;;556                return (char)nRet;
;;;557            }
;;;558        }
;;;559    # else
;;;560        int nRet;
;;;561        while(SH_DoCommand(0x7, 0, &nRet) != 0)
;;;562        {
;;;563            if(nRet != 0)
;;;564                return (char)nRet;
;;;565        }
;;;566    # endif
;;;567        return (0);
;;;568    #else
;;;569    
;;;570        while(1)
;;;571        {
;;;572            if((DEBUG_PORT->FSR & UART_FSR_RX_EMPTY_Msk) == 0)
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L1.2|
;;;573            {
;;;574                return (DEBUG_PORT->DATA);
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;575            }
;;;576        }
;;;577    
;;;578    #endif
;;;579    }
00000c  4770              BX       lr
;;;580    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40050000

                          AREA ||i.Hard_Fault_Handler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;64      */
;;;65     void Hard_Fault_Handler(uint32_t stack[])
000000  4604              MOV      r4,r0
;;;66     {
;;;67         printf("In Hard Fault Handler\n");
000002  a012              ADR      r0,|L2.76|
000004  f7fffffe          BL       __2printf
000008  a016              ADR      r0,|L2.100|
00000a  6821              LDR      r1,[r4,#0]
00000c  f7fffffe          BL       __2printf
000010  a017              ADR      r0,|L2.112|
000012  6861              LDR      r1,[r4,#4]
000014  f7fffffe          BL       __2printf
000018  a018              ADR      r0,|L2.124|
00001a  68a1              LDR      r1,[r4,#8]
00001c  f7fffffe          BL       __2printf
000020  a019              ADR      r0,|L2.136|
000022  68e1              LDR      r1,[r4,#0xc]
000024  f7fffffe          BL       __2printf
000028  a01a              ADR      r0,|L2.148|
00002a  6921              LDR      r1,[r4,#0x10]
00002c  f7fffffe          BL       __2printf
000030  a01b              ADR      r0,|L2.160|
000032  6961              LDR      r1,[r4,#0x14]
000034  f7fffffe          BL       __2printf
000038  a01c              ADR      r0,|L2.172|
00003a  69a1              LDR      r1,[r4,#0x18]
00003c  f7fffffe          BL       __2printf
000040  a01d              ADR      r0,|L2.184|
000042  69e1              LDR      r1,[r4,#0x1c]
000044  f7fffffe          BL       __2printf
                  |L2.72|
;;;68     
;;;69         stackDump(stack);
;;;70     
;;;71         // Replace while(1) with chip reset if WDT is not enabled for end product
;;;72         while(1);
000048  e7fe              B        |L2.72|
;;;73         //SYS->IPRSTC1 = SYS_IPRSTC1_CHIP_RST_Msk;
;;;74     }
;;;75     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
00004c  496e2048          DCB      "In Hard Fault Handler\n",0
000050  61726420
000054  4661756c
000058  74204861
00005c  6e646c65
000060  720a00  
000063  00                DCB      0
                  |L2.100|
000064  72302020          DCB      "r0  = 0x%x\n",0
000068  3d203078
00006c  25780a00
                  |L2.112|
000070  72312020          DCB      "r1  = 0x%x\n",0
000074  3d203078
000078  25780a00
                  |L2.124|
00007c  72322020          DCB      "r2  = 0x%x\n",0
000080  3d203078
000084  25780a00
                  |L2.136|
000088  72332020          DCB      "r3  = 0x%x\n",0
00008c  3d203078
000090  25780a00
                  |L2.148|
000094  72313220          DCB      "r12 = 0x%x\n",0
000098  3d203078
00009c  25780a00
                  |L2.160|
0000a0  6c722020          DCB      "lr  = 0x%x\n",0
0000a4  3d203078
0000a8  25780a00
                  |L2.172|
0000ac  70632020          DCB      "pc  = 0x%x\n",0
0000b0  3d203078
0000b4  25780a00
                  |L2.184|
0000b8  70737220          DCB      "psr = 0x%x\n",0
0000bc  3d203078
0000c0  25780a00

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;606    
;;;607    int IsDebugFifoEmpty(void)
000000  4802              LDR      r0,|L3.12|
;;;608    {
;;;609        return ((DEBUG_PORT->FSR & UART_FSR_TE_FLAG_Msk) != 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  00c0              LSLS     r0,r0,#3
000006  0fc0              LSRS     r0,r0,#31
;;;610    }
000008  4770              BX       lr
;;;611    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=2

                  SendChar PROC
;;;513     */
;;;514    void SendChar(int ch)
000000  4906              LDR      r1,|L4.28|
                  |L4.2|
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L4.2|
000008  280a              CMP      r0,#0xa
00000a  d104              BNE      |L4.22|
00000c  220d              MOVS     r2,#0xd
00000e  600a              STR      r2,[r1,#0]
                  |L4.16|
000010  698a              LDR      r2,[r1,#0x18]
000012  0212              LSLS     r2,r2,#8
000014  d4fc              BMI      |L4.16|
                  |L4.22|
000016  6008              STR      r0,[r1,#0]
;;;515    {
;;;516    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;517        g_buf[g_buf_len++] = ch;
;;;518        g_buf[g_buf_len] = '\0';
;;;519        if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;520        {
;;;521            /* Send the char */
;;;522            if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;523            {
;;;524                g_buf_len = 0;
;;;525                return;
;;;526            }
;;;527            else
;;;528            {
;;;529                g_buf_len = 0;
;;;530            }
;;;531        }
;;;532    #else
;;;533        SendChar_ToUART(ch);
;;;534    #endif
;;;535    }
000018  4770              BX       lr
;;;536    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40050000

                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;435    #ifndef NONBLOCK_PRINTF
;;;436    void SendChar_ToUART(int ch)
000000  4906              LDR      r1,|L5.28|
                  |L5.2|
;;;437    {
;;;438    
;;;439        while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk);
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L5.2|
;;;440        if(ch == '\n')
000008  280a              CMP      r0,#0xa
00000a  d104              BNE      |L5.22|
;;;441        {
;;;442            DEBUG_PORT->DATA = '\r';
00000c  220d              MOVS     r2,#0xd
00000e  600a              STR      r2,[r1,#0]
                  |L5.16|
;;;443            while(DEBUG_PORT->FSR & UART_FSR_TX_FULL_Msk);
000010  698a              LDR      r2,[r1,#0x18]
000012  0212              LSLS     r2,r2,#8
000014  d4fc              BMI      |L5.16|
                  |L5.22|
;;;444        }
;;;445    
;;;446        DEBUG_PORT->DATA = ch;
000016  6008              STR      r0,[r1,#0]
;;;447    }
000018  4770              BX       lr
;;;448    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=2

                  _ttywrch PROC
;;;621    
;;;622    void _ttywrch(int ch)
000000  4906              LDR      r1,|L6.28|
                  |L6.2|
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L6.2|
000008  280a              CMP      r0,#0xa
00000a  d104              BNE      |L6.22|
00000c  220d              MOVS     r2,#0xd
00000e  600a              STR      r2,[r1,#0]
                  |L6.16|
000010  698a              LDR      r2,[r1,#0x18]
000012  0212              LSLS     r2,r2,#8
000014  d4fc              BMI      |L6.16|
                  |L6.22|
000016  6008              STR      r0,[r1,#0]
;;;623    {
;;;624        SendChar(ch);
;;;625        return;
;;;626    }
000018  4770              BX       lr
;;;627    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40050000

                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;717    
;;;718    int ferror(FILE *stream)
000000  2000              MOVS     r0,#0
;;;719    {
;;;720        return EOF;
000002  43c0              MVNS     r0,r0
;;;721    }
000004  4770              BX       lr
;;;722    #endif
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;697    
;;;698    int fgetc(FILE *stream)
000000  4803              LDR      r0,|L8.16|
                  |L8.2|
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L8.2|
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;699    {
;;;700        return (GetChar());
;;;701    }
00000c  4770              BX       lr
;;;702    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40050000

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;646    
;;;647    int fputc(int ch, FILE *stream)
000000  4906              LDR      r1,|L9.28|
                  |L9.2|
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L9.2|
000008  280a              CMP      r0,#0xa
00000a  d104              BNE      |L9.22|
00000c  220d              MOVS     r2,#0xd
00000e  600a              STR      r2,[r1,#0]
                  |L9.16|
000010  698a              LDR      r2,[r1,#0x18]
000012  0212              LSLS     r2,r2,#8
000014  d4fc              BMI      |L9.16|
                  |L9.22|
000016  6008              STR      r0,[r1,#0]
;;;648    {
;;;649        SendChar(ch);
;;;650        return ch;
;;;651    }
000018  4770              BX       lr
;;;652    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40050000

                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;591    
;;;592    int kbhit(void)
000000  4802              LDR      r0,|L10.12|
;;;593    {
;;;594        return !((DEBUG_PORT->FSR & UART_FSR_RX_EMPTY_Msk) == 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  0440              LSLS     r0,r0,#17
000006  0fc0              LSRS     r0,r0,#31
;;;595    }
000008  4770              BX       lr
;;;596    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40050000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_retarget_c_d5a1b03f____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REVSH|
#line 132
|__asm___10_retarget_c_d5a1b03f____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 403 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 404

 IMPORT Hard_Fault_Handler

 MOVS r0, #4
 MOV r1, LR
 TST r0, r1  
 BEQ Stack_Use_MSP  
 MRS R0, PSP  
 B Get_LR_and_Branch
Stack_Use_MSP
 MRS R0, MSP  
Get_LR_and_Branch
 MOV R1, LR  
 LDR R2,= |Hard_Fault_Handler|  
 BX R2
	ENDP

;*** End   embedded assembler ***
